import dash
from dash import html, dcc, Output, Input, State
from dash.exceptions import PreventUpdate
import pickle
import pandas as pd
import tensorflow as tf
import numpy as np
from joblib import load



app = dash.Dash(__name__)

model = tf.keras.models.load_model('modelo_opt.h5')
preprocessor = load('preprocessor.joblib')
# Estilos CSS comunes y para secciones
styles = {
    'container': {
        'background-color': '#f8f9fa',
        'padding': '20px',
        'border-radius': '15px',
        'box-shadow': '0 4px 8px rgba(0,0,0,0.2)',
        'font-family': 'Arial, sans-serif',
        'width': '80%',
        'margin': '30px auto',
        'text-align': 'center'
    },
    'section': {
        'background-color': '#ffffff',
        'border-radius': '10px',
        'box-shadow': '0 2px 4px rgba(0,0,0,0.1)',
        'padding': '20px',
        'margin': '20px 0'
    },
    'input': {
        'width': '90%',
        'padding': '10px',
        'margin': '10px 5%',
        'border': '1px solid #ccc',
        'border-radius': '5px',
        'box-sizing': 'border-box'
    },
    'dropdown': {
        'width': '90%',
        'padding': '10px',
        'margin': '10px 5%',
        'border': '1px solid #ccc',
        'border-radius': '5px',
        'color': '#495057'
    },
    'button': {
        'width': '90%',
        'background-color': '#007BFF',
        'color': 'white',
        'padding': '12px',
        'margin': '20px 5%',
        'border': 'none',
        'border-radius': '5px',
        'cursor': 'pointer',
        'font-size': '16px',
        'font-weight': 'bold'
    }
}

# Layout de la aplicación
app.layout = html.Div(style=styles['container'], children=[
    html.H1("Solicitud de Crédito", style={'color': '#007BFF'}),
    html.Div(style=styles['section'], children=[
        html.H2("Información Básica"),
        dcc.Input(id='limit_bal', type='number', placeholder='Monto del crédito solicitado', style=styles['input']),
        dcc.Dropdown(
            id='sex',
            options=[{'label': 'Masculino', 'value': 1}, {'label': 'Femenino', 'value': 2}],
            placeholder='Seleccione el género',
            style=styles['dropdown']
        ),
        dcc.Dropdown(
            id='education',
            options=[
                {'label': 'Posgrado', 'value': 1},
                {'label': 'Universitario', 'value': 2},
                {'label': 'Secundaria', 'value': 3},
                {'label': 'Otros', 'value': 4}
            ],
            placeholder='Seleccione el nivel educativo',
            style=styles['dropdown']
        ),
        dcc.Dropdown(
            id='marriage',
            options=[
                {'label': 'Casado', 'value': 1},
                {'label': 'Soltero', 'value': 2},
                {'label': 'Otros', 'value': 3}
            ],
            placeholder='Seleccione el estado civil',
            style=styles['dropdown']
        ),
        dcc.Input(id='age', type='number', placeholder='Edad', style=styles['input']),
    ]),
    html.Div(style=styles['section'], children=[
        html.H2("Historial de Pagos"),
        *[dcc.Input(id=f'pay_{i}', type='number', placeholder=f'PAY_{i}: Estado de retraso del mes {i}', style=styles['input']) for i in range(0, 7)],
    ]),
    html.Div(style=styles['section'], children=[
        html.H2("Monto de Estado de Cuenta"),
        *[dcc.Input(id=f'bill_amt{i}', type='number', placeholder=f'BILL_AMT{i}: Monto del estado de cuenta mes {i}', style=styles['input']) for i in range(1, 7)],
    ]),
    html.Div(style=styles['section'], children=[
        html.H2("Montos de Pago"),
        *[dcc.Input(id=f'pay_amt{i}', type='number', placeholder=f'PAY_AMT{i}: Monto de pago mes {i}', style=styles['input']) for i in range(1, 7)],
    ]),
    html.Button('Evaluar Solicitud', id='evaluate-button', style=styles['button']),
    html.Div(id='credit-decision', style={'font-size': '20px', 'margin-top': '20px', 'color': '#28a745'})
])

@app.callback(
    Output('credit-decision', 'children'),
    Input('evaluate-button', 'n_clicks'),
    [State(f'pay_{i}', 'value') for i in range(0, 7)] +
    [State(f'bill_amt{i}', 'value') for i in range(1, 7)] +
    [State(f'pay_amt{i}', 'value') for i in range(1, 7)] +
    [State('limit_bal', 'value'), State('age', 'value'), State('sex', 'value'),
     State('education', 'value'), State('marriage', 'value')]
)
def evaluate_credit(n_clicks, *args):
    if not n_clicks:
        raise PreventUpdate

    if None in args:
        return "Por favor, complete todos los campos necesarios."

    try:
        input_df = pd.DataFrame([{
            'LIMIT_BAL': args[-5], 'EDUCATION': args[-2], 'MARRIAGE': args[-1],
            **{f'PAY_{i}': args[i] for i in range(7)},
            **{f'BILL_AMT{i}': args[i+6] for i in range(1,7)},
            **{f'PAY_AMT{i}': args[i+12] for i in range(1,7)}
        }])

        input_df_norm = preprocessor.transform(input_df)
        prediction = model.predict(input_df_norm)
        threshold = 0.50

        prediction = np.where(prediction >= threshold, 1, 0)
        
        return "Crédito Aprobado" if prediction == 1 else "Crédito Denegado"
    except Exception as e:
        return f"Error al evaluar la solicitud: {e}"



if __name__ == '__main__':
    app.run_server(debug=True)



